
@inject IJSRuntime js 

<div>
    <h1>Movies</h1>
</div>

<input type="checkbox" @bind="displayDeleteButton" />

<GenericList Data="Movies">
    <ElementTemplate>
        <IndividualMovie Movie="context"
                         DisplayDeleteButton="displayDeleteButton"
                         DeleteEvent="DeleteMovie" />
    </ElementTemplate>
</GenericList>
<GenericList Data="Movies">
    <ElementTemplate Context="movie">
        <IndividualMovie Movie="movie"
                         DisplayDeleteButton="displayDeleteButton"
                         DeleteEvent="DeleteMovie" />
    </ElementTemplate>
</GenericList>

@code {

    [Parameter]
    public List<Movie> Movies { get; set; }

    bool displayDeleteButton = true;

    private async Task DeleteMovie(Movie movie)
    {
        await js.WriteLog("Delete movie function");
        var result = await js.Confirm($"Are you sure to delete {movie.Title}");

        if (result == true)
        {
            Movies.Remove(movie);
        }
    }

    protected override void OnInitialized()
    {
        Console.WriteLine($"ONInitialized, Movie count = {Movies.Count()}");
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine($"OnParameterSet, Movie count = {Movies.Count()}");
    }

    protected override bool ShouldRender()
    {
        // If you set false, The UI will not rerender after some change
        return true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine($"OnAfterRender, First Render = {firstRender}");
    }
}
